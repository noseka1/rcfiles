% kub
#
# List Kubernetes events sorted by time
oc get events --sort-by metadata.creationTimestamp

# Watch Kubernetes events in all namespaces
oc get events --all-namespaces --sort-by metadata.creationTimestamp --watch

# List ALL Kubernetes resources in the current namespace
kubectl api-resources \
  --verbs=list \
  --namespaced \
  -o name \
  2>/dev/null | \
  grep -v events.events.k8s.io | \
  grep -v events | \
  grep -v packagemanifests.packages.operators.coreos.com | \
  xargs -n 1 \
    kubectl get \
      --show-kind \
      --ignore-not-found \
      --no-headers \
      2>/dev/null

# Remove finalizers from ALL Kubernetes resources in the current namespace that were marked for deletion
kubectl api-resources --verbs=list --namespaced -o name 2>/dev/null | \
  grep -v events.events.k8s.io | \
  grep -v events | \
  grep -v packagemanifests.packages.operators.coreos.com | \
  xargs -n 1 \
    kubectl get \
      --show-kind \
      --ignore-not-found \
      --no-headers \
      --output custom-columns=KIND:.kind,NAME:.metadata.name,TIMESTAMP=:.metadata.deletionTimestamp | \
  grep -v 'none>' | \
  while read kind name timestamp; do
    kubectl patch $kind $name -p '{"metadata":{"finalizers":null}}' --type merge
  done

# Dump Kubernetes secrets in the current namespace to stdout
oc get secret --output name | while read SECRET; do echo "SECRET $SECRET"; oc extract $SECRET --to -; done 2>&1

# Dump Kubernetes configmaps in the current namespace to stdout
oc get configmap --output name | while read CM; do echo "CONFIGMAP $CM"; oc extract $CM --to -; done 2>&1

# Extract AWS cloud provider secrets from OCP
oc extract -n openshift-machine-api secret/aws-cloud-credentials --to -

# Decode Helm secret
oc extract -n <namespace> secret/<name> --to - 2>/dev/null  | base64 -d | gunzip | jq

# SSH into CodeReady Containers (CRC) virtual machine
ssh -i ~/.crc/machines/crc/id_ecdsa core@api.crc.testing

# Delete all CSVs
oc get csv \
  --all-namespaces \
  --output custom-columns=NAMESPACE:.metadata.namespace,NAME:.metadata.name \
  --no-headers | \
  grep 'openshift-pipelines-operator-rh.v1.14.3' | \
  while read ns name; do
    oc delete csv --namespace $ns $name
  done

# Print OLM operator versions
oc get packagemanifest -o jsonpath='{range .items[*]}{.metadata.name} {.status.defaultChannel}{"\\n"}{end}'

# Approve all pending CSRs in OpenShift
oc get csr -o json | \
  jq -r '.items[] | select(.status == {} ) | .metadata.name' | \
  xargs --no-run-if-empty oc adm certificate approve

% lin

# Jump into ODF tools pod
oc rsh --namespace openshift-storage deploy/rook-ceph-tools

# Download the TLS certificate from the remote server
openssl s_client -showcerts -servername <server_fqdn> -connect <server_fqdn>:443 </dev/null

# Sort installed RPMs by size
rpm -qa --queryformat '%{size} %{name}\\n' | sort -rn

# Fix file names
find . -maxdepth 1 -type f | \
  while read f; do
    f2=$(echo $f | tr -d ',' | tr -d "'" | tr ' ' '.')
    echo $f2
    mv "$f" "$f2"
  done

# Remove terminal color sequences from the log file, https://superuser.com/a/380778
sed 's/\\x1b\\[[0-9;]*m//g'

# Removes all "leaf" packages from the system that were originally installed as dependencies of user-installed packages, but which are no longer required by any such package
dnf autoremove

# Register the system to the Red Hat Customer Portal and attach subscriptions
subscription-manager register && subscription-manager attach --pool 8a85f98460bfb0470160c2ff22f13e47

# Red Hat VPN
sudo openvpn --config /etc/openvpn/client/ovpn-rdu2-tcp.conf

# Log in to the OpenShift integrated registry
podman login -u xyz -p $(oc whoami -t) $(oc get route -n openshift-image-registry --no-headers --output custom-columns=HOSTNAME:.spec.host)

# Convert YouTube video to mp3
youtube-dl --extract-audio --audio-format mp3 <youtube_url>

# Update Debian packages
sudo apt update && sudo apt full-upgrade

# Break the CA bundle into individual cert files
awk 'BEGIN {c=0;} /BEGIN CERT/{c++} { print > "cert." c ".pem"}' < '<chain.pem>'

# Decode JWT token
echo <jwt_token> | jq -R 'gsub("-";"+") | gsub("_";"/") | split(".") | .[1] | @base64d | fromjson'

# Display X.509 certificate info
openssl x509 -text -in <cert.pem>

# Clean up stopped containers and unused container images
podman container prune --force && podman image prune --force

# Push to quay.io
podman push --authfile ~/.mysecrets/docker/myquay.json

# Find executable files in the current directory + all subdirectories
find . -type f -print0 | xargs -0 -n 100 file | grep 'ELF.*executable'

# Find and replace text recursively
find . -type f -name '*' -print0 | xargs -0 sed -i 's#<foo>#<bar>#g'

# Split full album flac into a flac per track
shnsplit -f <file.cue> -t '%n - %t' -o flac <file.flac>

# Get all extended attributes of filesystem object
getfattr -d -m - <file>

# Check if SELinux is denying access
sealert -a /var/log/audit/audit.log

# Show nftables rules
sudo nft -j list ruleset | jq

# Flush firewall rules
sudo nft flush ruleset

# Show firewalld configuration
sudo firewall-cmd --list-all-zones

# Display X.509 certificate fingerprint
openssl x509 -noout -sha256 -fingerprint -in <cert.pem>

# Edit matching lines using Vim QuickFix (use :cnext, :cprev)
vi -q <(rg -H --no-heading --vimgrep EXPRESSION)
