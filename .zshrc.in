# Various prompt colors. Choose a color and copy it to ~/.zshrc
# PS1='%K{red}%B%F{white}[%n@%m %~%f]$%k%b '
# PS1='%K{green}%B%F{white}[%n@%m %~%f]$%k%b '
# PS1='%K{yellow}%B%F{white}[%n@%m %~%f]$%k%b '
# PS1='%K{blue}%B%F{white}[%n@%m %~%f]$%k%b '
# PS1='%K{magenta}%B%F{white}[%n@%m %~%f]$%k%b '
# PS1='%K{cyan}%B%F{white}[%n@%m %~%f]$%k%b '

# Include definitions that are applicable for both bash and zsh
source $HOME/.shell.in

# Set up the prompt
autoload -Uz promptinit
promptinit
#prompt adam1

# Use emacs keybindings even if our EDITOR is set to vi
bindkey -e

# Set up history
HISTSIZE=1000
SAVEHIST=1000
HISTFILE=~/.zsh_history
setopt histignorealldups

# Bash-like behavior for globbing.
# If a pattern for filename generation has no matches, leave it unchanged in the argument list.
setopt no_nomatch

# Use modern completion system
autoload -Uz compinit
compinit

zstyle ':completion:*' auto-description 'specify: %d'
zstyle ':completion:*' completer _complete
zstyle ':completion:*' format 'Completing %d'
zstyle ':completion:*' group-name ''
zstyle ':completion:*' menu select=2
eval "$(dircolors -b)"
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' list-colors ''
zstyle ':completion:*' list-prompt %SAt %p: Hit TAB for more, or the character to insert%s
zstyle ':completion:*' matcher-list '' 'm:{a-z}={A-Z}' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=* l:|=*'
zstyle ':completion:*' menu select=long
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
zstyle ':completion:*' use-compctl false
zstyle ':completion:*' verbose true

zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'
zstyle ':completion:*:kill:*' command 'ps -u $USER -o pid,%cpu,tty,cputime,cmd'

# Bash-like navigation on the command-line
# See also https://stackoverflow.com/questions/10847255/how-to-make-zsh-forward-word-behaviour-same-as-in-bash-emacs
# This line must be located before the fast-syntax-highlighting
# See also https://github.com/zsh-users/zsh-syntax-highlighting/issues/67
autoload -U select-word-style
select-word-style bash

# Bash-like Ctrl-w (almost, zsh-autosuggestions seem to break the subsequent appending to the kill ring)
# See also https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#Widgets
zle -N backward-kill-space-word backward-kill-word-match
zstyle :zle:backward-kill-space-word word-style space
bindkey '^W' backward-kill-space-word

# Bash-like Ctrl-Alt-f and Ctrl-Alt-b
zle -N forward-shell-word forward-word-match
zstyle :zle:forward-shell-word word-style shell
bindkey '^[^F' forward-shell-word

zle -N backward-shell-word backward-word-match
zstyle :zle:backward-shell-word word-style shell
bindkey '^[^B' backward-shell-word

# Load plugins
zinit light zdharma-continuum/fast-syntax-highlighting
zinit load zdharma-continuum/history-search-multi-word
zinit light zsh-users/zsh-autosuggestions
zinit light amyreese/zsh-titles

zinit ice as"completion"
zinit snippet https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/ripgrep/_ripgrep

zinit ice as"completion" mv"git-completion.zsh -> _git"
zinit snippet https://raw.githubusercontent.com/git/git/master/contrib/completion/git-completion.zsh

zinit snippet OMZ::plugins/fasd/fasd.plugin.zsh

# Never complete beyond ambiguous choices
# See also https://stackoverflow.com/questions/37980851/never-complete-beyond-ambiguous-choices
setopt noautomenu

# Edit command line in full screen editor
# See also https://unix.stackexchange.com/questions/6620/how-to-edit-command-line-in-full-screen-editor-in-zsh
autoload -z edit-command-line
zle -N edit-command-line
bindkey "^X^E" edit-command-line

# Make Ctrl + Left/right arrow work the same way as in Bash
bindkey "^[[1;5C" forward-word
bindkey "^[[1;5D" backward-word

# Configure fasd completion
# See also https://github.com/clvv/fasd
bindkey '^X^A' fasd-complete    # C-x C-a to do fasd-complete (files and directories)
bindkey '^X^F' fasd-complete-f  # C-x C-f to do fasd-complete-f (only files)
bindkey '^X^D' fasd-complete-d  # C-x C-d to do fasd-complete-d (only directories)

# Disable the highlighting of pasted text
# See also https://unix.stackexchange.com/questions/331850/zsh-selects-a-pasted-text
zle_highlight=('paste:none')

# Search snippets and output on the shell
# See also https://github.com/knqyf263/pet#zsh
function pet-select() {
  BUFFER=$(pet search --query "$LBUFFER")
  CURSOR=$#BUFFER
  zle redisplay
}
zle -N pet-select
stty -ixon
bindkey '^x^r' pet-select

# Generate completions
function generate_completion() {
  if (( $+commands[${1}] )); then
    # If the completion file does not exist, generate it and then source it
    # Otherwise, source it and regenerate in the background
    if [[ ! -f "${fpath[1]}/_${1}" ]]; then
      ${1} ${2} zsh | tee "${fpath[1]}/_${1}" >/dev/null
      source "${fpath[1]}/_${1}"
    else
      source "${fpath[1]}/_${1}"
      ${1} ${2} zsh | tee "${fpath[1]}/_${1}" >/dev/null &|
    fi
  fi
}

generate_completion kubectl completion zsh
generate_completion oc completion zsh
generate_completion stern --completion zsh
generate_completion virtctl completion zsh
generate_completion velero completion zsh

# Fix very slow completion on git add ..., git rm ...
# See also https://superuser.com/questions/458906/zsh-tab-completion-of-git-commands-is-very-slow-how-can-i-turn-it-off
__git_files () {
  _wanted files expl 'local files' _files
}

# Unbind Windows+Alt+x key combination which I use to start/stop video recording in OBS
# See also:
# How to remove a zsh keybinding if I don't know what it does?
# https://unix.stackexchange.com/questions/285208/how-to-remove-a-zsh-keybinding-if-i-dont-know-what-it-does
bindkey -r "^[x"
